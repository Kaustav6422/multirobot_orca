<launch>

  <master auto="start"/>
  <arg name="namespace"/>
  <arg name="type" default="turtle" />
  <arg name="controlled" default="true" />

   <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
    <param name="footprint_padding" value="0.01" />
    <param name="controller_frequency" value="5.0" />
    <param name="controller_patience" value="3.0" />
    <param name="oscillation_timeout" value="30.0" />
    <param name="oscillation_distance" value="0.5" />
    <param name="planner_patience" value="1" />
    <param name="controller_patience" value="1" /> 
  
    <remap from="cmd_vel" to="mobile_base/commands/velocity"/> <!-- for kobuki -->
    <param name="recovery_behavior_enabled" value="true" />
    <param name="clearing_rotation_allowed" value="true"/>
    <param name="~controlled" value="$(arg controlled)" /> #added
    <param name="~tf_prefix" value="$(arg namespace)" />   #added

    <param name="base_global_planner" type="string" value="navfn/NavfnROS" /> <!-- added from clearpath robotics website --> #added
    <param name="base_local_planner" value="collvoid_local_planner/CollvoidLocalPlanner" />  <!-- CHANGED THE LOCAL PLANNER --> #added
    <!-- <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/> -->  <!-- added from clearpath robotics website --> #added
    
    <!-- <rosparam file="$(find multi_kobuki_gazebo)/launch/includes/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find multi_kobuki_gazebo)/launch/includes/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find multi_kobuki_gazebo)/launch/includes/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find multi_kobuki_gazebo)/launch/includes/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find multi_kobuki_gazebo)/launch/includes/base_local_planner_params.yaml" command="load" />  -->

    <rosparam command="load" file="$(find collvoid_stage)/params/costmap_common_$(arg type).yaml" ns="local_costmap" />
    <rosparam command="load" file="$(find collvoid_stage)/params/costmap_common_$(arg type).yaml" ns="global_costmap" />
    <rosparam command="load" file="$(find collvoid_stage)/params/move_base_params_$(arg type).yaml" />
    <rosparam command="load" file="$(find collvoid_stage)/params/collvoid_config.yaml" />
    <rosparam command="load" file="$(find collvoid_stage)/params/collvoid_common.yaml" ns="CollvoidLocalPlanner" />s
    
    <param name="global_costmap/global_frame" value="$(arg namespace)/map"/>
    <param name="global_costmap/robot_base_frame" value="$(arg namespace)/base_link"/>
    <param name="global_costmap/laser_scan_sensor/sensor_frame" value="/$(arg namespace)/base_laser_link"/>
    <param name="global_costmap/laser_scan_sensor/topic" value="/$(arg namespace)/base_scan"/>    
  
    <param name="local_costmap/global_frame" value="$(arg namespace)/odom"/>
    <param name="local_costmap/robot_base_frame" value="$(arg namespace)/base_link"/>
    <param name="local_costmap/laser_scan_sensor/sensor_frame" value="$(arg namespace)/base_laser_link"/>
    <param name="local_costmap/laser_scan_sensor/topic" value="/$(arg namespace)/base_scan"/>
    <param name="local_costmap/obstacle_layer/laser_scan_sensor/topic" value="/$(arg namespace)/base_scan"/>

   </node>

    # added
    <node pkg="collvoid_controller" type="active_collision_avoidance.py" name="active_collvoid">
     <param name="~base_frame_id" value="$(arg namespace)/base_link" />
    </node>

    # added
    <rosparam command="load" file="$(find collvoid_stage)/params/me_publisher_turtle.yaml"/>
    <rosparam command="load" file="$(find collvoid_stage)/params/collvoid_common.yaml" ns="collvoid" />
    <param name="collvoid/base_frame" value="$(arg namespace)/base_link" />

    # added
    <node pkg="collvoid_local_planner" type="MePublisher" name="me_publisher"  />
    <node pkg="collvoid_controller" type="position_share_controller.py" name="position_share_controller"  />

    # added
    <node pkg="collvoid_controller" type="detect_obstacles.py" name="detect_obstacles" >
      <param name="~base_frame" value="$(arg namespace)/base_link" />
    </node>

  

</launch>

































  

